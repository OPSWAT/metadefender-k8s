
## Uncomment the following lines to set a fixed user and password for the MD Core web interface that will overwrite 
## any secret that already exists for these credentials (the secret will be kept when the chart is deleted)
## If left unset the following will apply:
## - if no "mdcore-cred" secret exists, it will be created with the user "admin" and a random password
## - if the "mdcore-cred" secret exists, the values from the secret are used as credentials

mdcore_user: admin                      # Initial admin user for the MD Core web interface
mdcore_password: null                   # Initial admin password for the MD Core web interface, if not set it will be randomly generated


## Uncomment the following lines to set a fixed user and password for the MD Core PostgreSQL database that will overwrite 
## any secret that already exists for these credentials (the secret will be kept when the chart is deleted)
## If left unset the following will apply:
## - if no "mdcore-postgres-cred" secret exists, it will be created with the user "postgres" and a random password
## - if the "mdcore-postgres-cred" secret exists, the values from the secret are used as credentials

db_user: postgres                  # PostgreSQL database username 
db_password: null                  # PostgreSQL database password, if not set it will be randomly generated


## Uncomment the following line to set a fixed API key for MD Core that will overwrite 
## any secret that already exists for API key (the secret will be kept when the chart is deleted)
## If left unset the following will apply:
## - if no "mdcore-api-key" secret exists, it will be created with a random 36 character API key
## - if the "mdcore-api-key" secret exists, the value from the secret is used

mdcore_api_key: null                    # 36 character API key used for the MD Core REST API, if not set it will be randomly generated


## Set your MD Core license key here and it will be stored in the "mdcore-license-key" secret that will be created 
## if it does not exist. If left unset then a a secret is generated with and empty license key.

mdcore_license_key: <SET_LICENSE_KEY_HERE>    # A valid license key, **this value is mandatory**

activation_server: activation.dl.opswat.com   # URL to the OPSWAT activation server, this value should not be changed

## MD Core settings that are saved in the "mdcore_env" config map
MDCORE_REST_PORT: "8008"            # Default port for the MD Core service
MDCORE_DB_MODE: "4"                 # Database mode
MDCORE_DB_TYPE: remote              # Database type
MDCORE_DB_HOST: postgres-core       # Hostname / entrypoint of the database, this value should be changed any if using an external database service
MDCORE_DB_PORT: "5432"              # Port for the PostgreSQL Database
MDCORE_CERT_PATH: "/cert"

# Set to true if the respective database engine should also be deployed
deploy_with_core_db: true           # Enable or disable the local in-cluster PostgreSQL database

# Set to false to not create any volumes or host paths in the deployment, all storage will be ephemeral
persistance_enabled: true

# Available storage providers:
# - minikube-hostpath: Local storage on the current node using the minikube provisioner
# - no-provisioner: WIP, Local storage using static Volumes
# - hostPath
storage_provisioner: hostPath
storage_name: hostPath
storage_node: minikube
hostPathPrefix: mdcore-storage-<APP_NAMESPACE>      # This is the absolute path on the node where to keep the database filesystem for persistance, <APP_NAMESPACE> is replaced with the current deployment namespace

# Ingress setting for md core (md core setting are ignored if deploy_with_core is false)
core_ingress:
  host: <APP_NAMESPACE>-mdcore.k8s       # Hostname for the publicly accessible ingress, the `<APP_NAMESPACE>` string will be replaced with the namespace where the chart is deployed
  service: md-core                  # Service name where the ingress should route to, this should be left unchanged
  port: 8008                        # Port where the ingress should route to
  enabled: false                    # Enable or disable the ingress creation
  class: nginx                      # Sets the ingress class

## Uncomment if you want to use a private repo (it must already be configured in the cluster as a secret)
# imagePullSecrets:
#   - name: regcred

# Docker repo to use, this should be changed when using private images (this string will be prepended to the image name)
# If a component has "custom_repo: true" then the image name will be formated as "{docker_repo/}image_name{:BRANCH}" otherwise it will remain unaltered
core_docker_repo: opswat

env:                                                            # Set additional environment variables for the MD Core container
  CORE_CONF_JSON: '\{\"global/restaddress\": \"0.0.0.0\"\}'     # This sets MD Core to listen only on ipv4 addresses by default, remove this setting to listen also on ipv6 

core_components:
  postgres-core:
    name: postgres-core
    image: postgres
    env:
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mdcore-postgres-cred
            key: password
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: mdcore-postgres-cred
            key: user
    ports:
      - port: 5432
    is_db: true
    persistentDir: /var/lib/postgresql/data
    tls:
      enabled: false

  md-core:
    name: md-core
    image: opswat/metadefendercore-debian:5.2.1         # Overrides the default docker image for the MD Core service, this value can be changed if you want to set a different version of MD Core
    replicas: 1                                         # Sets the number of replicas if you want to have multiple MD Core instances
    env:
      - name: MD_USER
        valueFrom:
          secretKeyRef:
            name: mdcore-cred
            key: user
      - name: MD_PWD
        valueFrom:
          secretKeyRef:
            name: mdcore-cred
            key: password
      - name: MD_INSTANCE_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: APIKEY
        valueFrom:
          secretKeyRef:
            name: mdcore-api-key
            key: value
      - name: LICENSE_KEY
        valueFrom:
          secretKeyRef:
            name: mdcore-license-key
            key: value
      - name: DB_USER
        valueFrom:
          secretKeyRef:
            name: mdcore-postgres-cred
            key: user
      - name: DB_PWD
        valueFrom:
          secretKeyRef:
            name: mdcore-postgres-cred
            key: password
    tls:
      enabled: false
      certSecret: mdcore-tls-cert
      certSecretSubPath: mdcore.crt
      certKeySecret: mdcore-tls-cert-key
      certKeySecretSubPath: mdcore.key
    ports:
      - port: 8008                                       # Port to expose for the MD Core pod
    service_type: ClusterIP                              # Sets the service type for MD Core service (ClusterIP, NodePort, LoadBalancer)
    sessionAffinity: None
    service_annotations: null
    extra_labels:
      aws-type: fargate                                  # If `aws-type` is set to `fargate`, the MD Core pod will be scheduled on an AWS Fargate virtual node (if a fargate profile is provisioned and configured)
    resources:
      requests:
        memory: "7Gi"                                    # Minimum reserved memory
        cpu: "7.0"                                       # Minimum reserved cpu
      limits:
        memory: "8Gi"                                    # Maximum memory limit
        cpu: "8.0"                                       # Maximum cpu limit
    livenessProbe:
      httpGet:
        # scheme: HTTPS
        path: /readyz                                    # Health check endpoint
        port: 8008                                       # Health check port
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 3
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 0
    sidecars:                                           # Configuration for the activation-manager sidecar
      - name: activation-manager
        image: opswat/md-activation-manager
        envFrom:
          - configMapRef:
              name: mdcore-env
        env:
          - name: APIKEY
            valueFrom:
              secretKeyRef:
                name: mdcore-api-key
                key: value
          - name: LICENSE_KEY
            valueFrom:
              secretKeyRef:
                name: mdcore-license-key
                key: value
          - name: MDCORE_BASE_URL
            value: http://localhost
    initContainers:
      - name: check-db-ready
        image: postgres
        envFrom:
          - configMapRef:
              name: mdcore-env
        command: ['sh', '-c', 
          'until pg_isready -h $DB_HOST -p $DB_PORT; 
          do echo waiting for database; sleep 2; done;']
