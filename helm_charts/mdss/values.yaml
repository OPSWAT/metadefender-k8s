# Generate secrets for MDSS database username, password, postgres user and password
mdss_generate_secrets: true
MDSS_DB_USER: mdss                  # PostgreSQL database username 
MDSS_DB_PASSWORD: null              # PostgreSQL database password, if not set it will be randomly generated
MDSS_DB_HOST: postgres-mdss       # Hostname / entrypoint of the database, this value should be changed any if using an external database service
MDSS_DB_PORT: "5432"              # Port for the PostgreSQL Database
MDSS_DB_NAME: MDSS                # Database name to use

# Connection string template for the PostgreSQL database, additional db options can be added
POSTGRESQL_URL: "Host=<MDSS_DB_HOST>;Port=<MDSS_DB_PORT>;Username=<MDSS_DB_USER>;Password=<MDSS_DB_PASSWORD>;Database=<MDSS_DB_NAME>"

# Default values for mdss. These will also be included in the environment of each mdss container
mdss-common-environment:

  BRANCH: "4.1.0"
  ENABLED_MODULES: "azureblob,amazonsdk,nfs"                                  # Enabled modules by default
  # ENABLED_MODULES: "azureblob,amazonsdk,googlecloud,alibabacloud,azurefiles,smb,box,onedrive,sftp,debug,mft"             # All supported modules

  # PostgreSQL migrations Configuration
  PGMIGRATIONS_PORT: "27777"
  PGMIGRATIONS_HOST: "pgmigrations"
  PGMIGRATIONS_SCRIPTS_PATH: "/pgmigrations/ef_migrations"

  # Skip MongoDB to PostgreSQL migration by default
  SKIP_MONGO_TO_PG: "yes"
  
  # [DEPRECATED] Uncomment only when migrating data from MongoDB
  # This defines the connection string to the db ( should be modified when using an external db)
  MONGO_URL: "mongodb://mongodb:27017/MDCS"

  # Some managed mongo db services require ignoring certificate errors 
  MONGO_SSL_ALLOW_INVALID_CERTIFICATES: "false"

  MONGO_CA_CERTIFICATE: ""
  MONGO_DB: "MDCS"
  MONGO_MIGRATIONS_HOST: "mongomigrations"
  MONGO_MIGRATIONS_PORT: "27778"

  RABBITMQ_URI: "amqp://rabbitmq:5672"
  RABBITMQ_HOST: "rabbitmq"
  RABBITMQ_PORT: "5672"
  RABBITMQ_DEFAULT_PASS: "guest"
  RABBITMQ_DEFAULT_USER: "guest"
  # RABBITMQ_RPC_LONG_TIMEOUT value is in minutes
  RABBITMQ_RPC_LONG_TIMEOUT: "5"
  # This can be modified in order to define how many messages can be sent to rabbitmq in parallel.
  RABBITMQ_SCANNING_PREFETCH_COUNT: "10"

  APIGATEWAY_PORT: "8005"
  APIGATEWAY_PORT_SSL: "8006"

  NGINX_TIMEOUT: "300"
  BACKUPS_TO_KEEP: "3"
  LICENSINGSERVICE_HOST: "licensingservice"
  LICENSINGSERVICE_URL: "http://licensingservice"
  LICENSINGSERVICE_PORT: "5000"
  LICENSINGSERVICE_LISTENING_IP: "0.0.0.0"
  PRODUCT_NAME: "MetaDefender Storage Security"
  PRODUCT_NAME_SHORT: "MDSS"
  SMBSERVICE_URL: "http://smbservice"
  SFTPSERVICE_URL: "http://sftpservice"
  NFSSERVICE_URL: "http://nfsservice"
  # by default we use 6002-6006 7002-7006 because we start 5 processes internally
  SMBSERVICE_PORT: "6002"
  SMBSERVICE_LISTENING_IP: "0.0.0.0"
  SFTPSERVICE_PORT: "5003"
  SFTPSERVICE_LISTENING_IP: "0.0.0.0"
  NFSSERVICE_PORT: "5004"
  NFSSERVICE_LISTENING_IP: "0.0.0.0"
  ALLOW_SSL_CONFIGURATION_FROM_UI: "False"
  
  # These variables can be changed to reveal debug information in the application
  LOG_LEVEL: "4"

  # in seconds
  SMB_SHORT_DEADLINE: "30"
  # in minutes
  SMB_LONG_DEADLINE: "15"

  # in seconds
  SFTP_SHORT_DEADLINE: "30"
  # in minutes
  SFTP_LONG_DEADLINE: "15"

  # in seconds
  NFS_SHORT_DEADLINE: "30"
  # in minutes
  NFS_LONG_DEADLINE: "15"

  # This can be modified in order to specify the number of retries per operation( e.g: download, upload, scan)
  POLLY_RETRY_COUNT: "3"
  # There are two types of retry long and short. Long retry is configured to try every 1 minute until the POLLY_RETRY_COUNT is reached. This retry is used for web requests.
  POLLY_LONG_RETRY: "1"
  # This is the short retry version, configured to retry after 1 second.
  POLLY_SHORT_RETRY: "1"

  # This value is used to define the upload chuck for files transferred using SMB/SFTP/NFS , the limit is 7 MB (for azure files the limit is 4MB)
  SMB_UPLOAD_CHUNK: "2"
  SFTP_UPLOAD_CHUNK: "2"
  NFS_UPLOAD_CHUNK: "2"

  # This value is used to determine how MDSS consider that a file from a smb share is ready to be processed (Default 1-FILEOPEN_CHECK, 0-DEBOUNCE_CHECK)
  SMBSERVICE_FILE_READY_CHECK_MODE: "1"
  # This can be modified in order to define how many threads can be processed in parallel.
  SMBSERVICE_PREFETCH_COUNT: "10"

  # This value is used by the rtp process to decide whether to process all files on storage or only those added after its start up (0 - for new objects only, 1 - for all objects)
  DISCOVERY_SERVICE_SMB_RTP_HANDLING: "0"
  DISCOVERY_SERVICE_SFTP_RTP_HANDLING: "0"
  DISCOVERY_SERVICE_NFS_RTP_HANDLING: "0"
  DISCOVERY_SERVICE_FTP_RTP_HANDLING: "0"

  # This can be changed to the following values 0 - Default, 1 - IgnoreChainErrors, 2 - IgnoreAllErrors
  MD_CORE_CERTIFICATE_VALIDATION: "0"

  # This retry value is used only for box operations where the time increases exponentially between retries ( e.g: the second time it will be 4 minutes instead of two )
  POLLY_LONG_RETRY_BOX: "2"
  # This variable has the same mechanism as the POLLY_LONG_RETRY_BOX
  POLLY_SHORT_RETRY_BOX: "1"
  # This defines how much time shall pass between remediation retries when encountering failures.
  POLLY_POST_ACTION_RETRY_TIME: "30"

  LOAD_BALANCER_MD_CORE_UNAVAILABLE_TIME: "5"
  WEBCLIENT_HOST: "webclient"

  # This variable is used in order to limit the number of blobs we receive from azure per response.
  AZURE_BLOBS_PAGE_SIZE: "100"

  # This variable is used to force Signature Version 4 for AWS S3/S3 compatible request. 
  FORCE_AWS_SIGNATURE_V4: "1"

  DISCOVERY_SERVICE_IGNORE_EMPTY_OBJECTS: "0"

  # This variable is used to ignore nfs hidden objects (0 - do not ignore, 1 - ignore)
  DISCOVERY_SERVICE_NFS_SKIP_HIDDEN_OBJECTS: "0"

  # This variable is used to define how much time should pass until we can discover a file that has failed previously, after 24 hours it shall be discovered again.
  DISCOVERY_SERVICE_REPROCESSING_FAILED_TIME_HOURS: "24"

  # This variable is used to define how much time should pass until a stuck file's state is set to failed
  MARK_STUCK_FILE_AS_FAILED_HOURS: "24"

  CACHE_SERVICE_URI: "redis:6379,syncTimeout=10000"
  ### Deprecated
  CACHE_SERVICE_URL: "redis"
  CACHE_SERVICE_PORT: "6379"
  ###

  # This retry time is used for other generic operations.
  POLLY_RETRY_TIME: "30"

  # in seconds
  OBJECT_CONTENT_REDIS_TTL: "30"

  # Default number of hours for token expiration, maximum 24 hours
  TOKEN_EXPIRY_TIME_HOURS: "1"

  # time to wait (in minutes) before retrying the register session method in SMB
  SMBSERVICE_SESSION_RETRY_WAIT_TIME: "5"

  # maximum amount of retries for the register session method in SMB
  SMBSERVICE_SESSION_MAX_RETRIES: "3"

  # number of active connections per smb storage; default is 10, maximum is 100
  SMBSERVICE_SESSIONS_ON_STORAGE: "10"

  # time interval between two consecutive job runs for the discovery completed job
  DISCOVERY_COMPLETED_CHECK_SECONDS: "10"
  
  # number of retries of a file scan
  SCANNING_RETRY_COUNT: "3"
  
  # time interval (in seconds) windows service is checking if mdss processes are running
  PROCESSES_POLLING_INTERVAL: "10"
  
  # discovery throttler to stop creating discovery events
  DISCOVERY_THROTTLER_MAX_PENDING_FILES: "5000"
  DISCOVERY_THROTTLER_DELAY_MILLISECONDS: "60000"
  
  # Scanning variables that adjust the load of each scan instance
  SCAN_INSTANCE_QUEUE_THRESHOLD: "400"
  READYZ_CACHE_JOB_SECONDS: "5"
  REQUEUE_RETRY_COUNT: "6"
  REQUEUE_TIME_PER_RETRY_SECONDS: "5"

  # Remediation Prefetch Count
  RABBITMQ_ALIBABACLOUD_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_AMAZONSDK_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_AZUREBLOB_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_AZUREFILES_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_BOX_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_GOOGLECLOUD_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_MFT_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_NFS_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_ONE_DRIVE_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_SFTP_REMEDIATIONS_PREFETCH_COUNT: "10"
  RABBITMQ_SMB_REMEDIATIONS_PREFETCH_COUNT: "10"

  # NFS Discovery Service: special handling for situations where copying a file takes a lot of time and the stream is constantly closed and opened again by Windows
  # By default, Windows puts zero bytes for the whole file when the copy operation starts
  # During copy operation, the stream is closed and open again multiple times, causing our product to detect the file as new file after each closing of the stream.
  # If enabled, will check the last X KB (end of file threshold) of the file to have one valid byte (different than 0). If found, file is discovered. If not found, file is skipped as is still uploading.
  DISCOVERY_SERVICE_NFS_LARGE_FILE_SPECIAL_HANDLING_ENABLED: "0"
  DISCOVERY_SERVICE_NFS_LARGE_FILE_SPECIAL_HANDLING_END_OF_FILE_THRESHOLD_KB: "512"
  DISCOVERY_SERVICE_NFS_LARGE_FILE_SPECIAL_HANDLING_MIN_FILE_SIZE_MB: "10"

  # If enabled, each SMB process will log, every 5 seconds, the number of open file handlers
  SMBSERVICE_LOG_OPEN_FILE_HANDLERS: "0"

  # Debounce interval between consecutive discoveries of the same file
  # Value represents how much time should pass before a file is considered a new file after being edited
  # Default value is 0, meaning that the file is considered a new file after each edit
  FILE_DISCOVERY_DEBOUNCE_INTERVAL: "0"

  # Discovery storage specific debounce time used in order to check if a file is uploaded or not, we check if the file has not been modified between a 5 seconds interval
  # They must be lower than the FILE_DISCOVERY_DEBOUNCE_INTERVAL. If FILE_DISCOVERY_DEBOUNCE_INTERVAL is 0, these values will be used
  SFTP_DISCOVERY_DEBOUNCE_TIME_SECONDS: "5"
  NFS_DISCOVERY_DEBOUNCE_TIME_SECONDS: "5"
  SMBSERVICE_DISCOVERY_DEBOUNCE_TIME: "120"

  # Maximum number of files when creating a Pdf From Report
  MAXIMUM_FILES_PDF_REPORT: "10000"
  # If set to 1, it will log the temporary created files during remediations operations
  LOG_CREATION_OF_TEMP_FILES: "0"
  
  SHAREPOINT_MAX_CONCURRENT_REQUESTS: "5"
  SHAREPOINT_BATCH_INTERVAL_MS: "10000"
  SHAREPOINT_BATCH_SIZE: "10"

  # Maximum time needed to download a single chunk of data
  NFS_DOWNLOAD_CHUNK_TIMEOUT_SECONDS: "60"

  # When set to true, allows deletion of the original object after a move remediation action even if some actions failed, 
  # as long as at least one action succeeded and no actions are pending
  DELETE_OBJECT_ON_MOVE_REMEDIATION_FAILURE: "false"
  
  # OPSWAT Telemetry Configuration
  ENABLE_TELEMETRY: "no"
  ENABLE_AUTO_INSTRUMENTATION: "no"
  ENABLE_CONSOLE_DEBUG: "no"
  OPTEL_METER_NAME: ""
  OPTEL_ACTIVITY_SOURCENAME: ""
  OPTEL_COLLECTOR_ENDPOINT: "http://<OPTEL_ADDRESS>:4317"


# Set to true if the respective database engine should also be deployed
deploy_with_mdss_db: true                 # Enable or disable the local in-cluster database, set to false when deploying with an external database service

# Set to false to not create any volumes or host paths in the deployment, all storage will be ephemeral
persistance_enabled: true

# Set to true to deploy with HorizontalPodAutoscaling

hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 3
  cpuTargetUtilization: 85

# Available storage providers:
# - minikube-hostpath: Local storage on the current node using the minikube provisioner
# - no-provisioner: WIP, Local storage using static Volumes
# - hostPath
storage_provisioner: hostPath
storage_name: hostPath
storage_node: minikube
hostPathPrefix: mdss-storage-<APP_NAMESPACE>         # This is the absolute path on the node where to keep the database filesystem for persistance, <APP_NAMESPACE> is replaced with the current deployment namespace

# Ingress settings for mdss
mdss_ingress:
  host: <APP_NAMESPACE>-mdss.k8s             # Hostname for the publicly accessible ingress, the `<APP_NAMESPACE>` string will be replaced with the current namespace                
  service: webclient                    # Service name where the ingress should route to, this should be left unchanged          
  port: 80                              # Port where the ingress should route to
  enabled: false                        # Enable or disable the ingress creation      
  class: public                         # Sets the ingress class, it can be "public" or "nginx" or some other value depending on the ingress controller in the cluster
  spec_className: false                 # true -> for adding class as spec || false -> for adding class as annotation. false for GKE as it needs to be as annotation.
  tls: false                            # Flag for set up tls section in ingress
  secret: mdss-tls                      # SecretName of the tls secret created to be used for ingress

# Auto onboarding settings
auto_onboarding: false                  # If set to true, it will deploy a container that will do the initial setup automatically if correct values are provided
mdss_import_config: null                # Content of config file to be imported by the onboarding container
ONBOARDING_USER_NAME: null              # User name of user that will be created by onboarding container (defaults to admin if left unset)
ONBOARDING_PASSWORD: null               # Password of user that will be created by onboarding container (randomly generated if left unset, can be retrieved from the "onboarding-env" secret)
ONBOARDING_EMAIL: null                  # Email of user that will be created by onboarding container
ONBOARDING_FULL_NAME: null              # Full name of user that will be created by onboarding container

## Uncomment if you want to use a private repo (it must already be configured in the cluster as a secret)
# imagePullSecrets:
#   - name: regcred

# Docker repo to use, this should be changed when using private images (this string will be prepended to the image name)
# If a component has "custom_repo: true" then the image name will be formated as "{docker_repo/}image_name{:BRANCH}" otherwise it will remain unaltered
mdss_docker_repo: opswat

imagePullPolicy: IfNotPresent

mdss_config_map_env_name: 'mdss-env'
mdss_secret_env_name: 'mdss-postgres-cred'
mdssHostAliases:                              # Custom hosts entries
  - ip: "10.0.1.16"
    hostnames:
    - "s3-us-west-1.cloudian-sf"
    - "test.s3-us-west-1.cloudian-sf"
    - "small.s3-us-west-1.cloudian-sf"

mdss_components:
  postgres-mdss:
    name: postgres-mdss
    image: postgres:17
    ports:
      - port: 5432
    persistentDir: /var/lib/postgresql/data 
    is_db: true
    resources:
      requests:
        memory: "2Gi"
        cpu: "0.5"
        ephemeral-storage: "10Gi"

  pgmigrations:
    name: pgmigrations
    custom_repo: true
    image: mdcloudservices_pgmigrations
    ports:
      - port: 27777
    resources:
      requests:
        memory: "0.125Gi"
        cpu: "0.010"
        ephemeral-storage: "250Mi"

  mongomigrations:
    name: mongomigrations
    custom_repo: true
    image: mdcloudservices_mongo-migrations
    command: ["/bin/sh","-c"]
    args: ['cd /mongomigrations && sh ./migrations.sh 134']
    ports:
      - port: 27778
    resources:
      requests:
        memory: "0.125Gi"
        cpu: "0.010"
        ephemeral-storage: "0.25Gi"

  rabbitmq:
    name: rabbitmq
    image: rabbitmq:4.1.0-management-alpine
    ports:
      - port: 5672
      - port: 15672
      - port: 15692
    mountConfig:
      configName: rabbitmq-config
      mountPath: /data/rabbitmq/advanced.config
      subPath: advanced.config
    env:
      - name: RABBITMQ_ADVANCED_CONFIG_FILE
        value: /data/rabbitmq/advanced.config
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.5Gi"
        cpu: "0.5"
        ephemeral-storage: "1Gi"
  
  redis:
    name: redis
    image: redis:7.4.1-alpine
    ports:
      - port: 6379
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.125Gi"
        cpu: "0.100"
        ephemeral-storage: "0.2Gi"

  licensingservice:
    name: licensingservice
    custom_repo: true
    image: mdcloudservices_licensing
    ports:
      - port: 5000
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.125Gi"
        cpu: "0.010"
        ephemeral-storage: "0.25Gi"
  
  discoveryservice:
    name: discoveryservice
    custom_repo: true
    image: mdcloudservices_discovery
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.5Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"

  scanningservice:
    name: scanningservice
    custom_repo: true
    image: mdcloudservices_scanning
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "1Gi"
        cpu: "0.500"
        ephemeral-storage: "0.5Gi"
  
  notificationservice:
    name: notificationservice
    custom_repo: true
    image: mdcloudservices_notification
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"

  jobdispatcher:
    name: jobdispatcher
    custom_repo: true
    image: mdcloudservices_job-dispatcher
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.050"
        ephemeral-storage: "0.5Gi"
  
  loadbalancerservice:
    name: loadbalancerservice
    custom_repo: true
    image: "mdcloudservices_load-balancer"
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "0.5Gi"

  loggingservice:
    name: loggingservice
    custom_repo: true
    image: "mdcloudservices_logging"
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.050"
        ephemeral-storage: "0.5Gi"

  remediationsservice:
    name: remediationsservice
    custom_repo: true
    image: mdcloudservices_remediations
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "0.5Gi"
  
  storagesservice:
    name: storagesservice
    custom_repo: true
    image: mdcloudservices_storages
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
      
  workflowmanagerservice:
    name: workflowmanagerservice
    custom_repo: true
    image: mdcloudservices_workflowmanager
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "0.5Gi"
  
  apigateway:
    name: apigateway
    custom_repo: true
    image: mdcloudservices_api
    env:
      - name: ASPNETCORE_URLS
        value: http://+
    ports:
      - port: 443
      - port: 80
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.5Gi"
        cpu: "0.100"
        ephemeral-storage: "0.5Gi"

  webclient:
    name: webclient
    custom_repo: true
    image: mdcloudservices_web
    ports:
      - port: 443
      - port: 80
    mountConfig:
      configName: webclient-nginx-config
      mountPath: /etc/nginx/conf.d/default.conf
      subPath: default.conf
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "0.5Gi"

  usermanagementservice:
    name: usermanagementservice
    custom_repo: true
    image: mdcloudservices_usermanagement
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"

# ======================================= MONGOMIGRATIONS MODULE ================================================
  mongodb:
    name: mongodb
    module_name: mongomigrations
    image: mongo:7.0
    ports:
      - port: 27017
    persistentDir: /data/db
    is_db: true
    resources:
      requests:
        memory: "2Gi"
        cpu: "0.5"
        ephemeral-storage: "10Gi"

  # ======================================= AMAZONSDK MODULE ================================================
  discoveryamazonsdkservice:
    name: discoveryamazonsdkservice
    module_name: amazonsdk
    custom_repo: true
    image: mdcloudservices_discoveryamazonsdk
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"

  remediationsservice-amazonsdk:
    name: remediationsservice-amazonsdk
    module_name: amazonsdk
    custom_repo: true
    image: mdcloudservices_remediationsamazonsdk
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
  
  storagesservice-amazonsdk:
    name: storagesservice-amazonsdk
    module_name: amazonsdk
    custom_repo: true
    image: mdcloudservices_storagesamazonsdk
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  # ======================================= AZUREBLOB MODULE ================================================
  discoveryazureblobservice:
    name: discoveryazureblobservice
    module_name: azureblob
    custom_repo: true
    image: mdcloudservices_discoveryazureblob
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"

  remediationsservice-azureblob:
    name: remediationsservice-azureblob
    module_name: azureblob
    custom_repo: true
    image: mdcloudservices_remediationsazureblob
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
      
  storagesservice-azureblob:
    name: storagesservice-azureblob
    module_name: azureblob
    custom_repo: true
    image: mdcloudservices_storagesazureblob
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  # ======================================= ALIBABACLOUD MODULE ================================================
  discoveryalibabacloudservice:
    name: discoveryalibabacloudservice
    module_name: alibabacloud
    custom_repo: true
    image: mdcloudservices_discoveryalibabacloud
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"
  
  remediationsservice-alibabacloud:
    name: remediationsservice-alibabacloud
    module_name: alibabacloud
    custom_repo: true
    image: mdcloudservices_remediationsalibabacloud
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
  
  storagesservice-alibabacloud:
    name: storagesservice-alibabacloud
    module_name: alibabacloud
    custom_repo: true
    image: mdcloudservices_storagesalibabacloud
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  # ======================================= GOOGLECLOUD MODULE ================================================
  discoverygooglecloudservice:
    name: discoverygooglecloudservice
    module_name: googlecloud
    custom_repo: true
    image: mdcloudservices_discoverygooglecloud
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"
  
  remediationsservice-googlecloud:
    name: remediationsservice-googlecloud
    module_name: googlecloud
    custom_repo: true
    image: mdcloudservices_remediationsgooglecloud
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
  
  storagesservice-googlecloud:
    name: storagesservice-googlecloud
    module_name: googlecloud
    custom_repo: true
    image: mdcloudservices_storagesgooglecloud
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  # ======================================= BOX MODULE ================================================
  discoveryboxservice:
    name: discoveryboxservice
    module_name: box
    custom_repo: true
    image: mdcloudservices_discoverybox
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"
  
  remediationsservice-box:
    name: remediationsservice-box
    module_name: box
    custom_repo: true
    image: mdcloudservices_remediationsbox
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
      
  storagesservice-box:
    name: storagesservice-box
    module_name: box
    custom_repo: true
    image: mdcloudservices_storagesbox
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  # ======================================= AZUREFILES MODULE ================================================
  discoveryazurefilesservice:
    name: discoveryazurefilesservice
    module_name: azurefiles
    custom_repo: true
    image: mdcloudservices_discoveryazurefiles
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"
  
  remediationsservice-azurefiles:
    name: remediationsservice-azurefiles
    module_name: azurefiles
    custom_repo: true
    image: mdcloudservices_remediationsazurefiles
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
  
  storagesservice-azurefiles:
    name: storagesservice-azurefiles
    module_name: azurefiles
    custom_repo: true
    image: mdcloudservices_storagesazurefiles
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  # ======================================= SMB MODULE ================================================
  discoverysmbservice:
    name: discoverysmbservice
    module_name: smb
    custom_repo: true
    image: mdcloudservices_discoverysmb
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"
  
  remediationsservice-smb:
    name: remediationsservice-smb
    module_name: smb
    custom_repo: true
    image: mdcloudservices_remediationssmb
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
  
  storagesservice-smb:
    name: storagesservice-smb
    module_name: smb
    custom_repo: true
    image: mdcloudservices_storagessmb
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  
  smbservice:
    name: smbservice
    module_name: smb
    custom_repo: true
    image: mdcloudservices_smbservice
    ports:
      - port: 5002
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.5Gi"
        cpu: "0.500"
        ephemeral-storage: "0.5Gi"
  # ======================================= GRAPH MODULE ================================================
  discoverygraphservice:
    name: discoverygraphservice
    module_name: graph
    custom_repo: true
    image: mdcloudservices_discoverygraph
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"
  
  remediationsservice-graph:
    name: remediationsservice-graph
    module_name: graph
    custom_repo: true
    image: mdcloudservices_remediationsgraph
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
      
  storagesservice-graph:
    name: storagesservice-graph
    module_name: graph
    custom_repo: true
    image: mdcloudservices_storagesgraph
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  
  # ======================================= FTP MODULE ================================================
  discoveryftpservice:
    name: discoveryftpservice
    module_name: ftp
    custom_repo: true
    image: mdcloudservices_discoveryftp
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"

  remediationsservice-ftp:
    name: remediationsservice-ftp
    module_name: ftp
    custom_repo: true
    image: mdcloudservices_remediationsftp
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
  
  storagesservice-ftp:
    name: storagesservice-ftp
    module_name: ftp
    custom_repo: true
    image: mdcloudservices_storagesftp
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"

  # ======================================= SFTP MODULE ================================================
  discoverysftpservice:
    name: discoverysftpservice
    module_name: sftp
    custom_repo: true
    image: mdcloudservices_discoverysftp
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"
  
  remediationsservice-sftp:
    name: remediationsservice-sftp
    module_name: sftp
    custom_repo: true
    image: mdcloudservices_remediationssftp
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
  
  storagesservice-sftp:
    name: storagesservice-sftp
    module_name: sftp
    custom_repo: true
    image: mdcloudservices_storagessftp
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  
  sftpservice:
    name: sftpservice
    module_name: sftp
    custom_repo: true
    image: mdcloudservices_sftpservice
    ports:
      - port: 5003
    extra_labels:
      aws-type: fargate
    env:
      - name: ASPNETCORE_URLS
        value: http://+
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.500"
        ephemeral-storage: "0.5Gi"
      
  # ======================================= NFS MODULE ================================================
  discoverynfsservice:
    name: discoverynfsservice
    module_name: nfs
    custom_repo: true
    image: mdcloudservices_discoverynfs
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"
  
  remediationsservice-nfs:
    name: remediationsservice-nfs
    module_name: nfs
    custom_repo: true
    image: mdcloudservices_remediationsnfs
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
  
  storagesservice-nfs:
    name: storagesservice-nfs
    module_name: nfs
    custom_repo: true
    image: mdcloudservices_storagesnfs
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
  
  nfsservice:
    name: nfsservice
    module_name: nfs
    custom_repo: true
    image: mdcloudservices_nfsservice
    ports:
      - port: 5004
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.5Gi"
        cpu: "0.500"
        ephemeral-storage: "0.5Gi"

 # ======================================= MFT MODULE ================================================
  discoverymftservice:
    name: discoverymftservice
    module_name: mft
    custom_repo: true
    image: mdcloudservices_discoverymft
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "1.000"
        ephemeral-storage: "0.5Gi"
  
  remediationsservice-mft:
    name: remediationsservice-mft
    module_name: mft
    custom_repo: true
    image: mdcloudservices_remediationsmft
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.100"
        ephemeral-storage: "1Gi"
      
  storagesservice-mft:
    name: storagesservice-mft
    module_name: mft
    custom_repo: true
    image: mdcloudservices_storagesmft
    extra_labels:
      aws-type: fargate
    resources:
      requests:
        memory: "0.25Gi"
        cpu: "0.010"
        ephemeral-storage: "0.5Gi"
