---
kind: ConfigMap
apiVersion: v1
metadata:
  name: mdicapsrv-env
  namespace: {{ .Values.app_name }}
data:
  REST_PORT: {{ .Values.MDICAPSRV_REST_PORT | quote }}
  ICAP_PORT: {{ .Values.MDICAPSRV_ICAP_PORT | quote }}
  ICAPS_PORT: {{ .Values.MDICAPSRV_ICAPS_PORT | quote }}
  HTTPS_CERT_PATH : {{ .Values.MDICAPSRV_CERT_PATH   | quote }}
  ICAPS_CERT_PATH : {{ .Values.MDICAPSRV_CERT_PATH   | quote }}
  IMPORT_CONF_FILE : {{ .Values.MDICAPSRV_IMPORT_CONF_FILE  | quote }}
  ACTIVATION_SERVER: {{ .Values.activation_server }}

# # Uncomment for make ConfigMap for import configuration
# ---
# kind: ConfigMap
# apiVersion: v1
# metadata:
#   name: mdicapsrv-import-configuration
#   namespace: {{ $.Values.app_name }}
# data:
#   mdicapsrv-config.json: {{ toJson (.Files.Get "mdicapsrv-config.json")}}

# Generate, set or keep the MD ICAP Server credentials
{{- $icapPasswordValue := (randAlphaNum 24) | nospace | b64enc | quote }}
{{- $icapUserValue := "admin" | b64enc | quote }}
{{- $icapCredSecret := (lookup "v1" "Secret" .Release.Namespace "mdicapsrv-cred") }}
{{- if $icapCredSecret }}
{{- $icapPasswordValue = index $icapCredSecret.data "password" }}
{{- $icapUserValue = index $icapCredSecret.data "user" }}
{{- end -}}
{{- if .Values.mdicapsrv_password }}
{{- $icapPasswordValue = .Values.mdicapsrv_password | b64enc }}
{{- end -}}
{{- if .Values.mdicapsrv_user }}
{{- $icapUserValue = .Values.mdicapsrv_user | b64enc }}
{{- end }}

---
kind: Secret
apiVersion: v1
metadata:
  name: mdicapsrv-cred
  namespace: {{ .Values.app_name }}
  annotations:
    "helm.sh/resource-policy": keep
data:
  user: {{ $icapUserValue }}
  password: {{ $icapPasswordValue }}


# Generate, set or keep the MD ICAP Server API key
{{- $icapApiKeyValue := (randNumeric 36) | b64enc | quote }}
{{- $icapApiSecret := (lookup "v1" "Secret" .Release.Namespace "mdicapsrv-api-key") }}
{{- if $icapApiSecret }}
{{- $icapApiKeyValue = index $icapApiSecret.data "value" }}
{{- end -}}
{{- if .Values.mdicapsrv_api_key }}
{{- $icapApiKeyValue = .Values.mdicapsrv_api_key | b64enc }}
{{- end }}

---
kind: Secret
apiVersion: v1
metadata:
  name: mdicapsrv-api-key
  namespace: {{ .Values.app_name }}
  annotations:
    "helm.sh/resource-policy": keep
data:
  value: {{ $icapApiKeyValue }}

# Set or keep the MD ICAP Server license key
{{- $icapLicenseKeyValue := "SET_LICENSE_KEY_HERE" | b64enc | quote }}
{{- $icapLicenseSecret := (lookup "v1" "Secret" .Release.Namespace "mdicapsrv-license-key") }}
{{- if $icapLicenseSecret }}
{{- $icapLicenseKeyValue = index $icapLicenseSecret.data "value" }}
{{- end -}}
{{- if .Values.mdicapsrv_license_key }}
{{- $icapLicenseKeyValue = .Values.mdicapsrv_license_key | b64enc }}
{{- end }}

---
kind: Secret
apiVersion: v1
metadata:
  name: mdicapsrv-license-key
  namespace: {{ .Values.app_name }}
  annotations:
    "helm.sh/resource-policy": keep
data:
  value: {{ $icapLicenseKeyValue }}
---
{{ $component := .Values.icap_components }}
{{ if $component.md_icapsrv.import_configuration.enabled }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $component.md_icapsrv.import_configuration.importConfigMap }}
  namespace: {{ .Values.app_name }}
  annotations:
    "helm.sh/resource-policy": keep
data:
  {{ $component.md_icapsrv.import_configuration.importConfigMapSubPath}}: |
    {
      "schema": {
          "config": {
              "policy.rule.rule": {
                  "items": [
                      {
                          "active": true,
                          "description": "",
                          "id": 1,
                          "last_modified": 1658982216173,
                          "mutable": true,
                          "name": "Test",
                          "rule_configs": {
                              "advanced.allow_error_overwrite": false,
                              "advanced.allow_error_overwrite.core_busy": false,
                              "advanced.allow_error_overwrite.core_file_size_exceeded": false,
                              "advanced.allow_error_overwrite.core_server_error": false,
                              "advanced.allow_error_overwrite.multipart_error": false,
                              "advanced.allow_error_overwrite.scan_timeout": false,
                              "advanced.decoding_error": "BLOCK",
                              "advanced.not_supported_encoding": "BLOCK",
                              "request_filters.client_addresses": [],
                              "request_filters.destination_addresses": [],
                              "request_filters.headers": [],
                              "request_filters.icap_client_addresses": [],
                              "scan.allow_scan": true,
                              "scan.allow_scan.scan_timeout_value": 0,
                              "scan.allow_scan.target": 1,
                              "trickling.enable_trickling": false,
                              "trickling.enable_trickling.additional_drip_delay": 3,
                              "trickling.enable_trickling.additional_drip_size": 100,
                              "trickling.enable_trickling.enable_withhold": true,
                              "trickling.enable_trickling.enable_withhold.size": 1000,
                              "trickling.enable_trickling.first_drip_delay": 5,
                              "trickling.enable_trickling.first_drip_size": 100
                          }
                      }
                  ],
                  "order": [
                      1
                  ]
              }
          },
          "config-serial": 1,
          "schema-version": 8
      },
      "servers": [
          {
              "data": {},
              "id": 1,
              "name": "core",
              "server_preference": "failover",
              "type": "core",
              "uri_list": [
                  {
                      "enabled_local_scan": false,
                      "enabled_webhook": false,
                      "rule": "#",
                      "uri": "http://md-core:8008"
                  }
              ],
              "used": true
          }
      ],
      "version": 2
    }
{{ end }}