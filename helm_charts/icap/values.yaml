# Set the ACCEPT_EULA variable to any value to confirm your acceptance of the End-User Licensing Agreement.
ACCEPT_EULA: false
## Uncomment the following lines to set a fixed user and password for the MD ICAP Server web interface that will overwrite 
## any secret that already exists for these credentials (the secret will be kept when the chart is deleted)
## If left unset the following will apply:
## - if no "mdicapsrv-cred" secret exists, it will be created with the user "admin" and a random password
## - if the "mdicapsrv-cred" secret exists, the values from the secret are used as credentials

mdicapsrv_user: admin                      # Initial admin user for the MD ICAP Server web interface
mdicapsrv_password: null                   # Initial admin password for the MD ICAP Server web interface, if not set it will be randomly generated

## Uncomment the following line to set a fixed API key for MD ICAP Server that will overwrite 
## any secret that already exists for API key (the secret will be kept when the chart is deleted)
## If left unset the following will apply:
## - if no "mdicapsrv-api-key" secret exists, it will be created with a random 36 character API key
## - if the "mdicapsrv-api-key" secret exists, the value from the secret is used

mdicapsrv_api_key: null                   # 36 character API key used for the MD ICAP Server REST API, if not set it will be randomly generated

## Set your MD ICAP Server license key here and it will be stored in the "mdicapsrv-license-key" secret that will be created 
## if it does not exist. If left unset then a a secret is generated with and empty license key.

mdicapsrv_license_key: <SET_LICENSE_KEY_HERE>    # A valid license key, **this value is mandatory**

activation_server: activation.dl.opswat.com   # URL to the OPSWAT activation server, this value should not be changed

# Set to false to not create any volumes or host paths in the deployment, all storage will be ephemeral
persistance_enabled: true

# Available storage providers:
# - minikube-hostpath: Local storage on the current node using the minikube provisioner
# - no-provisioner: WIP, Local storage using static Volumes
# - hostPath
storage_provisioner: hostPath
storage_name: hostPath
storage_node: minikube
hostPathPrefix: mdicapsrv-storage      # This is the absolute path on the node where to keep the data filesystem for persistance

# Ingress setting for MD ICAP Server
icap_ingress:
  host: mdicapsrv-ingress.k8s       # Hostname for the publicly accessible ingress
  service: md-icapsrv               # Service name where the ingress should route to, this should be left unchanged
  rest_port: 8048                   # Port where the ingress should route to
  enabled: false                    # Enable or disable the ingress creation
  class: nginx                      # Sets the ingress class

## Uncomment if you want to use a private repo (it must already be configured in the cluster as a secret)
# imagePullSecrets:
#   - name: regcred

# Docker repo to use, this should be changed when using private images (this string will be prepended to the image name)
# If a component has "custom_repo: true" then the image name will be formated as "{docker_repo/}image_name{:BRANCH}" otherwise it will remain unaltered
icap_docker_repo: opswat

icap_components:
  md_icapsrv:
    name: md-icapsrv
    image: opswat/metadefendericapsrv-debian:5.1.1                                # Overrides the default docker image for the MD ICAP Server service, this value can be changed if you want to set a different version of MD ICAP Server
    # Warning: When to use this feature!
    replicas: 1                                                   # Sets the number of replicas if you want to have multiple MD ICAP Server instances
    env:
      - name: MD_USER
        valueFrom:
          secretKeyRef:
            name: mdicapsrv-cred
            key: user
      - name: MD_PWD
        valueFrom:
          secretKeyRef:
            name: mdicapsrv-cred
            key: password
      - name: APIKEY
        valueFrom:
          secretKeyRef:
            name: mdicapsrv-api-key
            key: value
      - name: LICENSE_KEY
        valueFrom:
          secretKeyRef:
            name: mdicapsrv-license-key
            key: value
    ## Support set data retention
    data_retention:
      config_history: 168
      processing_history: 168
    import_configuration:
      enabled: false
      targets: 
        - schema
        - servers
      ## Support password to encrypt/decrypt exported JSON
      importConfigMap: mdicapsrv-import-configuration
      importConfigPath: /opt/opswat
      importConfigMapSubPath: settings_export_package.zip
      importConfigFilePass: ""
    nginx_support:
      enabled: false
    # If you enabled TLS, need to provide the secret name and key
    # The application support for: "TLSv1.3","TLSv1.2","TLSv1.1","TLSv1", "SSLv3"
    tls:
      https:
        enabled: false
        certSecret: mdicapsrv-https-tls-cert
        certSecretSubPath: mdicapsrv-https.crt
        certKeySecret: mdicapsrv-https-tls-cert-key
        certKeySecretSubPath: mdicapsrv-https.key
        mountPath: /https_cert
        tlsVersions:
          - "TLSv1.2"
      icaps:
        enabled: false
        certSecret: mdicapsrv-icaps-tls-cert
        certSecretSubPath: mdicapsrv-icaps.crt
        certKeySecret: mdicapsrv-icaps-tls-cert-key
        certKeySecretSubPath: mdicapsrv-icaps.key
        mountPath: /icaps_cert
        tlsVersions:
          - "TLSv1.2"
      nginxs:
        enabled: false
        certSecret: mdicapsrv-nginxs-tls-cert
        certSecretSubPath: mdicapsrv-nginxs.crt
        certKeySecret: mdicapsrv-nginxs-tls-cert-key
        certKeySecretSubPath: mdicapsrv-nginxs.key
        mountPath: /nginxs_cert
        tlsVersions:
          - "TLSv1.2"
    ports:
      rest: 8048 # REST port to expose for the MD ICAP Server pod
      icap: 1344 # ICAP port to expose for the MD ICAP Server pod
      icaps: 11344 # ICAPS port to expose for the MD ICAP Server pod
      nginx: 8043 # NGINX port for nginx ingress controller connect
      nginxs: 8443 # NGINX (SSL) port for nginx ingress controller connect
    service_type: ClusterIP                              # Sets the service type for MD ICAP Server service (ClusterIP, NodePort, LoadBalancer)
    sessionAffinity: None
    service_annotations: null
    extra_labels:
      aws-type: fargate                                  # If `aws-type` is set to `fargate`, the MD ICAP Server pod will be scheduled on an AWS Fargate virtual node (if a fargate profile is provisioned and configured)
    resources:
      requests:
        memory: "2Gi"                                    # Minimum reserved memory
        cpu: "2.0"                                       # Minimum reserved cpu
      limits:
        memory: "4Gi"                                    # Maximum memory limit
        cpu: "4.0"                                       # Maximum cpu limit
    livenessProbe:
      httpGet:
        path: /readyz                                    # Health check endpoint.
        port: 8048                                       # Health check port. It should be the same with icap_components.md_icapsrv.ports.rest_port
        # scheme: HTTPS                                  # If enabled TLS, need to uncomment here
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 3
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 0
    sidecars:                                           # Configuration for the activation-manager sidecar
      - name: activation-manager
        image: alpine
        envFrom:
          - configMapRef:
              name: mdicapsrv-env
        env:
          - name: APIKEY
            valueFrom:
              secretKeyRef:
                name: mdicapsrv-api-key
                key: value
          - name: LICENSE_KEY
            valueFrom:
              secretKeyRef:
                name: mdicapsrv-license-key
                key: value
        command: ["/bin/sh", "-c"]
        args:                                             # Test
          - | 
            apk add curl jq
            stop() {
              echo 'Deactivating using the MD ICAP Server API'
              curl -H "apikey: $APIKEY" -X POST "https://localhost:$REST_PORT/admin/license/deactivation"
              echo 'Deactivating using activation server API'
              curl -X GET "https://$ACTIVATION_SERVER/deactivation?key=$LICENSE_KEY&deployment=$DEPLOYMENT"
              exit 0
            }
            trap stop SIGTERM SIGINT SIGQUIT

            until [ -n $DEPLOYMENT ] && [ $DEPLOYMENT != null ]; do
                echo 'Checking...'
                export DEPLOYMENT=$(curl --silent -H "apikey: $APIKEY" "http://localhost:$REST_PORT/admin/license" | jq -r ".deployment")
                echo "Deployment ID: $DEPLOYMENT"
                sleep 1
            done
            echo "Waiting for termination signal..."
            while true; do sleep 1; done
            echo "MD ICAP Server pod finished, exiting"
            exit 0

# nodeSelector is the simplest recommended form of node selection constraint. 
# You can add the nodeSelector field to your Pod specification and specify the node labels you want the target node to have.
# Kubernetes only schedules the Pod onto nodes that have each of the labels you specify.
nodeSelector: {}